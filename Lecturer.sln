using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using CourseManagementSystemWebApplication.Models;

namespace CourseManagementSystemWebApplication.Controllers
{
    public class LecturerController : Controller
    {
        private CourseDBContext db = new CourseDBContext();

        //
        // GET: /Lecturer/

        public ActionResult Index()
        {
            var Lecturers = db.Lecturers.Include(t => t.Designation).Include(t => t.Department);
            return View(Lecturers.ToList());
        }

        //
        // GET: /Lecturer/Details/5

        public ActionResult Details(int id = 0)
        {
            Lecturer Lecturer = db.Lecturers.Find(id);
            if (Lecturer == null)
            {
                return HttpNotFound();
            }
            return View(Lecturer);
        }

        //
        // GET: /Lecturer/Create

        public ActionResult Create()
        {
            ViewBag.DesignationId = new SelectList(db.Designations, "DesignationId", "Name");
            ViewBag.DepartmentId = new SelectList(db.Departments, "DepartmentId", "Code");
            return View();
        }

        //
        // POST: /Lecturer/Create

        [HttpPost]
        public ActionResult Create(Lecturer Lecturer)
        {
            ViewBag.DesignationId = new SelectList(db.Designations, "DesignationId", "Name", Lecturer.DesignationId);
            ViewBag.DepartmentId = new SelectList(db.Departments, "DepartmentId", "Code", Lecturer.DepartmentId);
            if (ModelState.IsValid)
            {
                Lecturer.RemainingCredit = Lecturer.CreditToBeTaken;
                db.Lecturers.Add(Lecturer);
                db.SaveChanges();
                ViewBag.Message = Lecturer.Name + " has been saved in database.";
                return View();
            }
            return View();
        }

        //
        // GET: /Lecturer/Edit/5

        public ActionResult Edit(int id = 0)
        {
            Lecturer Lecturer = db.Lecturers.Find(id);
            if (Lecturer == null)
            {
                return HttpNotFound();
            }
            ViewBag.DesignationId = new SelectList(db.Designations, "DesignationId", "Name", Lecturer.DesignationId);
            ViewBag.DepartmentId = new SelectList(db.Departments, "DepartmentId", "Code", Lecturer.DepartmentId);
            return View(Lecturer);
        }

        //
        // POST: /Lecturer/Edit/5

        [HttpPost]
        public ActionResult Edit(Lecturer Lecturer)
        {
            if (ModelState.IsValid)
            {
                db.Entry(Lecturer).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.DesignationId = new SelectList(db.Designations, "DesignationId", "Name", Lecturer.DesignationId);
            ViewBag.DepartmentId = new SelectList(db.Departments, "DepartmentId", "Code", Lecturer.DepartmentId);
            return View(Lecturer);
        }

        //
        // GET: /Lecturer/Delete/5

        public ActionResult Delete(int id = 0)
        {
            Lecturer Lecturer = db.Lecturers.Find(id);
            if (Lecturer == null)
            {
                return HttpNotFound();
            }
            return View(Lecturer);
        }

        //
        // POST: /Lecturer/Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(int id)
        {
            Lecturer Lecturer = db.Lecturers.Find(id);
            db.Lecturers.Remove(Lecturer);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }

        public JsonResult CheckLecturerEmail(string email)
        {
            var result = db.Lecturers.Count(t => t.Email == email) == 0;
            return Json(result, JsonRequestBehavior.AllowGet);
        }
    }
}